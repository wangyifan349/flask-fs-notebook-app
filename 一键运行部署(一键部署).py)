import os, shutil
from flask import (
    Flask, request, jsonify, redirect, url_for,
    send_from_directory, abort, render_template_string
)
from werkzeug.utils import secure_filename

app = Flask(__name__)
app.secret_key = '请替换为你自己的随机字符串'

# 配置目录与允许的上传后缀
NOTE_DIR    = 'notes'
UPLOAD_DIR  = 'uploads'
ALLOWED_EXT = {'png','jpg','jpeg','gif','mp4','mp3','ogg'}

# 启动前确保目录存在
for d in (NOTE_DIR, UPLOAD_DIR):
    os.makedirs(d, exist_ok=True)

# --- 模板：base.html ---
BASE_HTML = '''
<!DOCTYPE html>
<html lang="zh-CN">
<head>
  <meta charset="UTF-8">
  <title>{% block title %}{% endblock %} - 云端笔记</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css"
        rel="stylesheet">
  {% block head %}{% endblock %}
</head>
<body class="p-4 bg-light">
  <div class="container bg-white p-4 shadow-sm rounded">
    {% with msgs = get_flashed_messages(with_categories=true) %}
      {% if msgs %}
        {% for c,m in msgs %}
          <div class="alert alert-{{ c }} alert-dismissible fade show">
            {{ m }}
            <button class="btn-close" data-bs-dismiss="alert"></button>
          </div>
        {% endfor %}
      {% endif %}
    {% endwith %}
    {% block content %}{% endblock %}
  </div>
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
  {% block scripts %}{% endblock %}
</body>
</html>
'''

# --- 模板：management.html ---
MGMT_HTML = '''
{% extends 'base' %}
{% block title %}管理笔记{% endblock %}
{% block content %}
<h1 class="mb-4">管理笔记</h1>

<div class="input-group mb-3">
  <input id="search-input" type="text" class="form-control" placeholder="搜索标题或内容…">
  <button id="btn-search" class="btn btn-outline-primary">🔍 搜索</button>
  <button id="btn-clear" class="btn btn-outline-secondary">清除</button>
</div>

<table class="table table-hover">
  <thead><tr><th>标题</th><th>操作</th></tr></thead>
  <tbody id="note-list">
    {% for n in notes %}
    <tr data-title="{{n.title}}">
      <td class="title">{{n.title}}</td>
      <td>
        <a href="{{ url_for('view', title=n.title) }}" target="_blank"
           class="btn btn-sm btn-success">查看</a>
        <button class="btn btn-sm btn-warning btn-rename">重命名</button>
        <button class="btn btn-sm btn-danger btn-delete">删除</button>
      </td>
    </tr>
    {% endfor %}
  </tbody>
</table>
<button id="btn-new" class="btn btn-primary mb-5">＋ 新建笔记</button>

<hr>

<h2 class="mt-4">文件管理</h2>
<form id="frm-upload" class="input-group mb-3" enctype="multipart/form-data">
  <input type="file" name="file" class="form-control">
  <button class="btn btn-info">上传</button>
</form>
<ul id="file-list" class="list-group"></ul>
{% endblock %}

{% block scripts %}
<script>
// 全局 AJAX POST 简易封装
function ajax(url, data, cb){
  fetch(url, {
    method:'POST',
    headers:{'Content-Type':'application/json'},
    body: JSON.stringify(data)
  })
  .then(r => r.json().then(j=> r.ok?cb(j):Promise.reject(j.error)))
  .catch(e => alert(e));
}

// Modal 控件
let modal = new bootstrap.Modal('#mdl'), act, oldName;

// 新建
document.getElementById('btn-new').onclick = ()=>{
  act='new'; oldName='';
  document.getElementById('mdl-title').innerText='新建笔记';
  document.getElementById('mdl-input').value='';
  modal.show();
};

// 重命名
document.querySelectorAll('.btn-rename').forEach(btn=>{
  btn.onclick = e=>{
    act='rename';
    let tr = e.target.closest('tr');
    oldName = tr.dataset.title;
    document.getElementById('mdl-title').innerText='重命名';
    document.getElementById('mdl-input').value = oldName;
    modal.show();
  };
});

// 删除
document.querySelectorAll('.btn-delete').forEach(btn=>{
  btn.onclick = e=>{
    let t = e.target.closest('tr').dataset.title;
    if(confirm('确定删除笔记？')) {
      ajax('/note/delete',{title:t},()=>location.reload());
    }
  };
});

// Modal 确定
document.getElementById('mdl-ok').onclick = e=>{
  e.preventDefault();
  let v = document.getElementById('mdl-input').value.trim();
  if(!v){alert('名称不能为空');return;}
  if(act=='new')   ajax('/note/new',{title:v},()=>location.reload());
  else             ajax('/note/rename',{old:oldName,new:v},()=>location.reload());
};

// 搜索
document.getElementById('btn-search').onclick = ()=>{
  let q = document.getElementById('search-input').value.trim();
  if(!q){return;}
  fetch('/search?q='+encodeURIComponent(q))
    .then(r=>r.json())
    .then(list=>{
      let tb = document.getElementById('note-list');
      tb.innerHTML = '';
      list.forEach(n=>{
        let tr = document.createElement('tr');
        tr.dataset.title = n.title;
        tr.innerHTML = `
          <td>${n.title}</td>
          <td>
            <a class="btn btn-sm btn-success" target="_blank"
               href="/view/${n.title}">查看</a>
            <button class="btn btn-sm btn-warning btn-rename">重命名</button>
            <button class="btn btn-sm btn-danger btn-delete">删除</button>
          </td>`;
        tb.appendChild(tr);
      });
      // 重新绑定按钮事件
      location.reload();
    });
};

// 清除搜索
document.getElementById('btn-clear').onclick = ()=>location.reload();

// 文件上传
document.getElementById('frm-upload').onsubmit = e=>{
  e.preventDefault();
  let fd = new FormData(e.target);
  fetch('/upload',{method:'POST', body:fd})
    .then(r=>r.json().then(j=>r.ok?listFiles():alert(j.error)))
    .catch(e=>alert(e));
};

// 列出上传文件
function listFiles(){
  fetch('/files').then(r=>r.json()).then(arr=>{
    let ul = document.getElementById('file-list');
    ul.innerHTML = '';
    arr.forEach(f=>{
      let li = document.createElement('li');
      li.className = 'list-group-item';
      let ext = f.name.split('.').pop().toLowerCase();
      let link = `<a href="${f.url}" target="_blank">${f.name}</a>`;
      if(['mp4','mp3','ogg'].includes(ext)){
        link += `<br><${ext} controls src="${f.url}"
          style="max-width:100%;margin-top:5px;"></${ext}>`;
      }
      li.innerHTML = link;
      ul.appendChild(li);
    });
  });
}
listFiles();
</script>

<!-- Modal HTML -->
<div class="modal fade" id="mdl" tabindex="-1">
  <div class="modal-dialog">
    <form class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="mdl-title">标题</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
      </div>
      <div class="modal-body">
        <input id="mdl-input" class="form-control" placeholder="输入笔记名">
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary"
                data-bs-dismiss="modal">取消</button>
        <button id="mdl-ok" class="btn btn-primary">确定</button>
      </div>
    </form>
  </div>
</div>
{% endblock %}
'''

# --- 模板：edit.html ---
EDIT_HTML = '''
{% extends 'base' %}
{% block title %}编辑：{{ title }}{% endblock %}
{% block content %}
<h1 class="mb-4">编辑：{{ title }}</h1>
<form method="post">
  <textarea name="content" class="form-control" rows="20">{{ content }}</textarea>
  <div class="mt-3">
    <button class="btn btn-primary">保存</button>
    <a class="btn btn-secondary" href="{{ url_for('view', title=title) }}">取消</a>
  </div>
</form>
{% endblock %}
'''

# --- 模板：view.html ---
VIEW_HTML = '''
{% extends 'base' %}
{% block title %}查看：{{ title }}{% endblock %}
{% block head %}
<link rel="stylesheet"
 href="https://cdn.jsdelivr.net/npm/katex@0.16.3/dist/katex.min.css">
<link rel="stylesheet"
 href="https://cdn.jsdelivr.net/npm/highlight.js@11.7.0/styles/github.min.css">
{% endblock %}
{% block content %}
<div class="d-flex justify-content-between align-items-center mb-3">
  <h1>查看：{{ title }}</h1>
  <div>
    <a class="btn btn-warning" href="{{ url_for('edit', title=title) }}">编辑</a>
    {% if mode=='render' %}
      <a class="btn btn-secondary"
         href="{{ url_for('view', title=title, mode='raw') }}">
         原文</a>
    {% else %}
      <a class="btn btn-secondary"
         href="{{ url_for('view', title=title, mode='render') }}">
         渲染</a>
    {% endif %}
    <a class="btn btn-link" href="{{ url_for('management') }}">管理</a>
  </div>
</div>
{% if mode=='raw' %}
  <pre class="border p-3">{{ content }}</pre>
{% else %}
  <div id="md" class="border p-4 rounded"></div>
{% endif %}
{% endblock %}
{% block scripts %}
<script src="https://cdn.jsdelivr.net/npm/markdown-it@13.0.1/dist/markdown-it.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/markdown-it-katex@3.0.1/dist/markdown-it-katex.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/markdown-it-highlightjs@3.3.0/dist/markdown-it-highlightjs.min.js"></script>
<script>
const md = window.markdownit({html:true,linkify:true,typographer:true})
            .use(window.markdownitKatex)
            .use(window.markdownitHighlightjs);
const content = {{ content|tojson }};
document.getElementById('md').innerHTML = md.render(content);
</script>
{% endblock %}
'''

# 注册 base 模板供 extends 使用
app.jinja_loader.mapping = {
    'base': BASE_HTML
}


# --- 工具函数：安全笔记路径 & 列表 & LCS ---
def note_path(title):
    fn = secure_filename(title) or 'untitled'
    return os.path.join(NOTE_DIR, f"{fn}.md")

def list_notes():
    items = []
    for fn in os.listdir(NOTE_DIR):
        if fn.lower().endswith('.md'):
            t = fn[:-3]
            with open(os.path.join(NOTE_DIR, fn), encoding='utf-8') as f:
                c = f.read()
            items.append({'title': t, 'content': c})
    items.sort(key=lambda x: os.path.getmtime(note_path(x['title'])), reverse=True)
    return items

def lcs(a, b):
    la, lb = len(a), len(b)
    dp = [[0]*(lb+1) for _ in range(la+1)]
    for i in range(la):
        for j in range(lb):
            if a[i]==b[j]:
                dp[i+1][j+1] = dp[i][j]+1
            else:
                dp[i+1][j+1] = max(dp[i][j+1], dp[i+1][j])
    return dp[la][lb]


# --- 路由：首页重定向 ---
@app.route('/')
def index():
    return redirect(url_for('management'))

# --- 路由：管理页 ---
@app.route('/management')
def management():
    notes = list_notes()
    return render_template_string(MGMT_HTML, notes=notes)

# --- 路由：新建/重命名/删除（AJAX） ---
@app.route('/note/<action>', methods=['POST'])
def note_action(action):
    data = request.get_json(force=True)
    try:
        if action == 'new':
            title = data.get('title','').strip()
            if not title: raise ValueError('标题不能为空')
            p = note_path(title)
            if os.path.exists(p): raise FileExistsError('已存在同名笔记')
            open(p,'w',encoding='utf-8').close()

        elif action == 'rename':
            old = data.get('old','').strip()
            new = data.get('new','').strip()
            if not old or not new: raise ValueError('名称不能为空')
            oldp, newp = note_path(old), note_path(new)
            if not os.path.exists(oldp): raise FileNotFoundError('源文件不存在')
            if os.path.exists(newp): raise FileExistsError('目标笔记已存在')
            os.rename(oldp, newp)

        elif action == 'delete':
            title = data.get('title','').strip()
            p = note_path(title)
            if os.path.exists(p):
                os.remove(p)

        else:
            raise ValueError('未知操作')

        return jsonify(ok=True)
    except Exception as e:
        return jsonify(ok=False, error=str(e)), 400

# --- 路由：编辑笔记 ---
@app.route('/edit/<title>', methods=['GET','POST'])
def edit(title):
    p = note_path(title)
    if request.method == 'POST':
        content = request.form.get('content','')
        with open(p,'w',encoding='utf-8') as f:
            f.write(content)
        return redirect(url_for('view', title=title))

    if not os.path.exists(p):
        abort(404, '笔记不存在')
    with open(p, encoding='utf-8') as f:
        content = f.read()
    return render_template_string(EDIT_HTML, title=title, content=content)

# --- 路由：查看笔记 ---
@app.route('/view/<title>')
def view(title):
    mode = request.args.get('mode','render')
    p = note_path(title)
    if not os.path.exists(p):
        abort(404, '笔记不存在')
    with open(p, encoding='utf-8') as f:
        content = f.read()
    return render_template_string(VIEW_HTML,
                                  title=title,
                                  content=content,
                                  mode=mode)

# --- 路由：搜索（优先标题匹配） ---
@app.route('/search')
def search():
    q = request.args.get('q','').lower()
    results = []
    for note in list_notes():
        t = note['title'].lower()
        c = note['content'].lower()
        if q in t or q in c:
            score = (lcs(q, t) * 3 if q in t else 0) + lcs(q, c)
            results.append({
                'title': note['title'],
                'score': score
            })
    results.sort(key=lambda x: x['score'], reverse=True)
    return jsonify(results)

# --- 路由：文件上传 & 列表 & 访问 ---
@app.route('/upload', methods=['POST'])
def upload():
    f = request.files.get('file')
    if not f:
        return jsonify(ok=False, error='未选择文件'), 400
    fn  = secure_filename(f.filename)
    ext = fn.rsplit('.',1)[-1].lower()
    if ext not in ALLOWED_EXT:
        return jsonify(ok=False, error='不支持的文件类型'), 400
    dst = os.path.join(UPLOAD_DIR, fn)
    f.save(dst)
    return jsonify(ok=True, url=url_for('uploaded_file', filename=fn))

@app.route('/files')
def files():
    arr = []
    for fn in os.listdir(UPLOAD_DIR):
        url = url_for('uploaded_file', filename=fn)
        arr.append({'name': fn, 'url': url})
    return jsonify(arr)

@app.route('/uploads/<filename>')
def uploaded_file(filename):
    return send_from_directory(UPLOAD_DIR, filename)


if __name__ == '__main__':
    app.run(debug=True)
